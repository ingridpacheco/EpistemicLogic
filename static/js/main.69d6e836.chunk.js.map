{"version":3,"sources":["pictures/bg-index.jpg","pictures/graph.png","changeGraph.js","calculateLogic.js","graph.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","OPS","changeGraph","graph","publicAnnouncement","symbol","item","shift","states1","states2","includes","agent","symbolAgent","concat","getSymbolStates","states","length","allStates","getStates","keys","difference","j","size","value","next","indexOf","push","finalStatesAnd","i","finalStatesOr","l","finalStatesImp","expression1","finalStatesK","rootNode1","getRootNode","symbol1","adjacents1","getAdjacents","expression2","finalStatesB","rootNode2","symbol2","adjacents2","Calculate","expressionStack","resultVar1","resultVar2","rootNode","symbolInState","quantity","letter","alert","removeStates","Error","setRootNode","Graph","Object","classCallCheck","this","AdjList","Map","EdgeLabel","SymbolList","v","clear","undefined","get","set","addSymbol","w","addAgent","edge","edge2","addStates","counter","edges","key","values","state","index","splice","adj","delete","correctAdj","getAgent","removeStateFromEdge","removeStateFromSymbol","get_keys","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","get_values","get_letters","LetterList","conc","letters","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","err","return","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","console","log","Logicresult","createGraph","vertices","addVertex","addEdge","App","_this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","logic","target","result","getResult","replace","toUpperCase","operations","agents","variables","arrayLogic","parseExpression","exp","oldResult","newOrder","changeRootNode","changeLetters","vertice","letterinList","removeLetter","addLetter","clearGraph","_this$state","_this$state2","react_default","a","createElement","className","style","backgroundColor","src","logo","alt","index_es","variant","elevation","paddingTop","paddingBottom","display","component","textAlign","fontSize","paddingLeft","grafo","width","getAllState","map","getEdges","fontWeight","aria-label","name","onChange","row","control","color","label","labelPlacement","id","margin","marginRight","marginLeft","marginTop","maxWidth","onClick","error","disabled","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.69d6e836.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg-index.be70d7dd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/graph.bdd94ea3.png\";","//Operadoes usados na operacao\n// ^ -> e\n// V -> ou\n// ➡ -> implica\n// ~ -> not\n// Ka -> para todo vizinho que tem o agente 'a' (na aresta de ligação)\n// Ba -> algum vizinho que tem o agente 'a' (na aresta de ligação)\n// [] -> anúncio público\n// const OPS = ['^', 'V', '~', '➡', '[','K','B']\nconst OPS = ['^', 'V', '!', '➡', 'K','B','[']\n\n//Define se um valor e ou nao um operador\nconst IsOperator = (symbol) => {\n    return OPS.includes(symbol)\n}\n\n//Retorna os estados resultantes do anúncio\nexport const changeGraph = (graph, publicAnnouncement) => {\n    let item = publicAnnouncement.shift()\n    let states1 = [] \n    let states2 = []\n    if (!IsOperator(item)){\n        let agent = publicAnnouncement.shift()\n        let symbolAgent = item.concat(agent)\n        return graph.getSymbolStates(symbolAgent)\n    }\n    switch(item){\n        case '!':\n            let states = changeGraph(graph, publicAnnouncement)\n            if (states.length !== 0){\n                let allStates = graph.getStates()\n                let keys = allStates.keys()\n                let difference = []\n                for (let j = 0; j < allStates.size; j++){\n                    let value = keys.next().value\n                    if (states.indexOf(value) === -1){\n                        difference.push(value)\n                    }\n                }\n                return difference\n            }\n            break\n        case 'V':\n            let finalStatesAnd = []\n            states1 = changeGraph(graph, publicAnnouncement)\n            states2 = changeGraph(graph, publicAnnouncement)\n            for (let i = 0; i < states1.length; i++){\n                if (!states2.includes(states1[i]))\n                    finalStatesAnd.push(states1[i])\n            }\n            finalStatesAnd = finalStatesAnd.concat(states2)\n            return finalStatesAnd\n\n        case '^':\n            let finalStatesOr = []\n            states1 = changeGraph(graph, publicAnnouncement)\n            states2 = changeGraph(graph, publicAnnouncement)\n            for (let i = 0; i < states1.length; i++){\n                if (states2.includes(states1[i]))\n                    finalStatesOr.push(states1[i])\n            }\n            for (let l = 0; l < states2.length; l++){\n                if (states1.includes(states2[l]) && !finalStatesOr.includes(states2[l]))\n                    finalStatesOr.push(states2[l])\n            }\n            return finalStatesOr\n\n        case '➡':\n            let finalStatesImp = []\n            publicAnnouncement = ['!'].concat(publicAnnouncement)\n            states1 = changeGraph(graph, publicAnnouncement)\n            states2 = changeGraph(graph, publicAnnouncement)\n            for (let i = 0; i < states1.length; i++){\n                if (!states2.includes(states1[i]))\n                    finalStatesImp.push(states1[i])\n            }\n            finalStatesImp = finalStatesImp.concat(states2)\n            return finalStatesImp\n        case 'K':\n            let expression1 = []\n            let finalStatesK = []\n            for (let j = 0; j < publicAnnouncement.length; j++){\n                expression1.push(publicAnnouncement[j])\n            }\n            const rootNode1 = graph.getRootNode()\n            let symbol1 = expression1.shift()\n            states1 = changeGraph(graph, expression1)\n            const adjacents1 = graph.getAdjacents(rootNode1,symbol1)\n            publicAnnouncement.shift()\n            if (adjacents1.length === 0){\n                if (states1.includes(rootNode1)){\n                    return [rootNode1]\n                }\n                return []\n            }\n            if (!(states1.includes(rootNode1))){\n                return []\n            }\n            finalStatesK.push(rootNode1)\n            for (let i = 0; i < adjacents1.length; i++){\n                if (!(states1.includes(adjacents1[i]))){\n                    return []\n                }\n                finalStatesK.push(adjacents1[i])\n            }\n            return finalStatesK\n        case 'B':\n            let expression2 = []\n            let finalStatesB = []\n            for (let j = 0; j < publicAnnouncement.length; j++){\n                expression2.push(publicAnnouncement[j])\n            }\n            const rootNode2 = graph.getRootNode()\n            let symbol2 = expression2.shift()\n            states1 = changeGraph(graph, expression2)\n            const adjacents2 = graph.getAdjacents(rootNode2,symbol2)\n            publicAnnouncement.shift()\n            if (adjacents2.length === 0){\n                return []\n            }\n            if (states1.includes(rootNode2)){\n                finalStatesB.push(rootNode2)\n            }\n            for (let i = 0; i < adjacents2.length; i++){\n                if (states1.includes(adjacents2[i])){\n                    finalStatesB.push(adjacents2[i])\n                }\n            }\n            return finalStatesB\n        default:\n            return graph\n    }\n\n    return graph\n}","import { changeGraph } from './changeGraph'\n\n//Operadoes usados na operacao\n// ^ -> e\n// V -> ou\n// ➡ -> implica\n// ~ -> not\n// Ka -> para todo vizinho que tem o agente 'a' (na aresta de ligação)\n// Ba -> algum vizinho que tem o agente 'a' (na aresta de ligação)\n// [] -> anúncio público\n// const OPS = ['^', 'V', '~', '➡', '[','K','B']\nconst OPS = ['^', 'V', '!', '➡', 'K','B','[']\n\n//Define se um valor e ou nao um operador\nconst IsOperator = (symbol) => {\n    return OPS.includes(symbol)\n}\n\n//Recebe a expressao como uma pilha com os operadores e valores. Ex. exp = [\"➡\",\"~\",\"A\",\"B\"] => ~A➡B(Notacao normal) = ➡~AB(Notacao polonesa)\nconst Calculate = (expressionStack, graph) => {\n    let item = expressionStack.shift()\n    let resultVar1\n    let resultVar2\n    if (!IsOperator(item)){\n        const rootNode = graph.getRootNode()\n        let agent = expressionStack.shift()\n        let symbolAgent = item.concat(agent)\n        return graph.symbolInState(rootNode, symbolAgent)\n    }\n    else{\n        switch(item){\n            case \"[\":\n                let publicAnnouncement = []\n                let quantity = expressionStack.length\n                for (let i = 0; i < quantity; i++){\n                    let letter = expressionStack.shift()\n                    if (letter === \"]\"){\n                        break;\n                    }\n                    publicAnnouncement.push(letter)\n                }\n                let states = changeGraph(graph, publicAnnouncement)\n                if (states.length !== 0){\n                    let allStates = graph.getStates()\n                    let keys = allStates.keys()\n                    let difference = []\n                    for (let j = 0; j < allStates.size; j++){\n                        let value = keys.next().value\n                        if (states.indexOf(value) === -1){\n                            difference.push(value)\n                        }\n                    }\n                    if (difference.includes(graph.getRootNode())){\n                        alert(\"ISSO NÃO É VERDADE\");\n                    }\n                    else{\n                        graph.removeStates(difference)\n                    }\n                }\n                if (expressionStack.length === 0){\n                    return new Error(\"Não tem o que validar\")\n                }\n                return Calculate(expressionStack, graph)\n            case \"K\":\n                let expression1 = []\n                for (let j = 0; j < expressionStack.length; j++){\n                    expression1.push(expressionStack[j])\n                }\n                const rootNode1 = graph.getRootNode()\n                let symbol1 = expression1.shift()\n                const adjacents1 = graph.getAdjacents(rootNode1,symbol1)\n                expressionStack.shift()\n                if (adjacents1.length === 0){\n                    return Calculate(expressionStack, graph)\n                }\n                for (let i = 0; i < adjacents1.length; i++){\n                    if (!Calculate(expressionStack, graph)){\n                        return false\n                    }\n                    expressionStack = expression1\n                    graph.setRootNode(adjacents1[i])\n                    if (!Calculate(expressionStack, graph)){\n                        graph.setRootNode(rootNode1)\n                        return false\n                    }\n                    if (i !== adjacents1.length)\n                        expressionStack = expression1\n                }\n                graph.setRootNode(rootNode1)\n                return true\n            case \"B\":\n                let expression2 = []\n                for (let j = 0; j < expressionStack.length; j++){\n                    expression2.push(expressionStack[j])\n                }\n                const rootNode2 = graph.getRootNode()\n                let symbol2 = expression2.shift()\n                const adjacents2 = graph.getAdjacents(rootNode2,symbol2)\n                expressionStack.shift()\n                if (adjacents2.length === 0){\n                    return Calculate(expressionStack, graph)\n                }\n                for (let i = 0; i < adjacents2.length; i++){\n                    if (Calculate(expressionStack, graph)){\n                        return true\n                    }\n                    expressionStack = expression2\n                    graph.setRootNode(adjacents2[i])\n                    if (Calculate(expressionStack, graph)){\n                        graph.setRootNode(rootNode2)\n                        return true\n                    }\n                    if (i !== adjacents2.length)\n                        expressionStack = expression2\n                }\n                graph.setRootNode(rootNode2)\n                return false\n            case \"^\":\n                resultVar1 = Calculate(expressionStack, graph)\n                resultVar2 = Calculate(expressionStack, graph)\n                return resultVar1 && resultVar2\n            case \"V\":\n                resultVar1 = Calculate(expressionStack, graph) \n                resultVar2 = Calculate(expressionStack, graph)\n                return resultVar1 || resultVar2\n            case \"!\":\n                return !Calculate(expressionStack, graph)\n            case \"➡\":\n                resultVar1 = !Calculate(expressionStack, graph)\n                resultVar2 = Calculate(expressionStack, graph)\n                return resultVar1 || resultVar2\n            default:\n        }\n    }\n}\n\nexport default Calculate;","export default class Graph {\n    constructor(){\n        this.AdjList = new Map();\n        this.EdgeLabel = new Map();\n        this.SymbolList = new Map();\n        this.rootNode = '';\n    }\n  \n    setRootNode(v){\n      this.rootNode = v;\n    }\n  \n    getRootNode(){\n      return this.rootNode\n    }\n\n    clearGraph(){\n      this.AdjList.clear()\n      this.EdgeLabel.clear()\n      this.SymbolList.clear()\n    }\n\n    addSymbol(symbol, agent, v){\n      let symbolAgent\n      switch(agent){\n        case 0:\n            symbolAgent = symbol.concat('X')\n            break\n        case 1:\n          symbolAgent = symbol.concat('Y')\n          break\n        case 2:\n          symbolAgent = symbol.concat('Z')\n          break\n        default:\n          symbolAgent = symbol\n      }\n      if (this.SymbolList.get(symbolAgent) === undefined){\n        this.SymbolList.set(symbolAgent, [])\n      }\n      this.SymbolList.get(symbolAgent).push(v)\n    }\n\n    addVertex(v){\n      this.AdjList.set(v, []);\n      for (let i = 0; i < v.length; i++)\n        this.addSymbol(v[i], i, v)\n    }\n  \n    addEdge(v, w, agent){\n      this.AdjList.get(v).push(w);\n      this.AdjList.get(w).push(v);\n      this.addAgent(v,w,agent)\n    }\n  \n    addAgent(v,w,agent){\n      let edge = v.concat(w)\n      this.EdgeLabel.set(edge,agent)\n    }\n\n    getAgent(v,w,letter){\n      let edge = v.concat(w)\n      let edge2 = w.concat(v)\n      if ((this.EdgeLabel.get(edge) !== letter) && (this.EdgeLabel.get(edge2) !== letter)){\n        return false\n      }\n      return true\n    }\n\n    getStates(){\n      return this.AdjList\n    }\n\n    getAllState(){\n      let addStates = []\n      let states = this.AdjList.keys()\n      let counter = 0\n      while (counter < this.AdjList.size){\n        addStates.push(states.next().value)\n        counter++\n      }\n      return addStates\n    }\n\n    getEdges(){\n      let states = this.AdjList.keys()\n      let counter = 0\n      let edges = []\n      while (counter < this.AdjList.size){\n        let key = states.next().value\n        let values = this.AdjList.get(key)\n        for (let i = 0; i < values.length; i++){\n          let edge = key.concat(values[i])\n          let edge2 = values[i].concat(key)\n          let agent = this.EdgeLabel.get(edge) || this.EdgeLabel.get(edge2)\n          edges.push(`${key}-${agent}-${values[i]}`)\n        }\n        counter++\n      }\n      return edges\n    }\n\n    removeStateFromSymbol(state){\n      let keys = this.SymbolList.keys();\n      let counter = 0\n      while (counter < this.SymbolList.size){\n        let values = this.SymbolList.get(keys.next().value)\n        if (values.includes(state)){\n          let index = values.indexOf(state)\n          values.splice(index, 1)\n        }\n        counter++\n      }\n    }\n\n    removeStateFromEdge(state){\n      let adj = this.AdjList.get(state)\n      for (let i = 0; i < adj.length; i++){\n        this.EdgeLabel.delete(state.concat(adj[i]))\n        this.EdgeLabel.delete(adj[i].concat(state))\n      }\n      let keys = this.AdjList.keys();\n      let counter = 0\n      while (counter < this.AdjList.size){\n        let values = this.AdjList.get(keys.next().value)\n        if (values.includes(state)){\n          let index = values.indexOf(state)\n          values.splice(index, 1)\n        }\n        counter++\n      }\n    }\n  \n    getAdjacents(v, letter){\n      let adj = this.AdjList.get(v)\n      let correctAdj = []\n      for (let i = 0; i < adj.length; i++){\n        if (this.getAgent(v,adj[i],letter))\n          correctAdj.push(adj[i])\n      }\n      return correctAdj\n    }\n  \n    symbolInState(v,symbolAgent){\n      return this.SymbolList.get(symbolAgent).includes(v)\n    }\n\n    getSymbolStates(symbolAgent){\n      return this.SymbolList.get(symbolAgent)\n    }\n\n    removeStates(states){\n      let quantity = states.length\n      let adj = {}\n      for (let i = 0; i < quantity; i++){\n        adj[states[i]] = this.AdjList.get(states[i])\n      }\n      for (let i = 0; i < quantity; i++){\n        let state = states.shift()\n        this.removeStateFromEdge(state)\n        this.AdjList.delete(state)\n        this.removeStateFromSymbol(state)\n      }\n    }\n  \n    printGraph(){ \n        var get_keys = this.AdjList.keys(); \n      \n        for (var i of get_keys)  \n        { \n            var get_values = this.AdjList.get(i);\n            var get_letters = this.LetterList.get(i);\n            var conc = \"\";\n            var letters = \"\";\n      \n            for (var j of get_values)\n              conc += j + \" \";\n              \n            for (var k of get_letters)\n              letters += k + \" \";\n      \n            console.log(i + \" -> \" + conc + \" -> \" + letters); \n        } \n    } \n  }","import React, { Component } from 'react';\nimport logo from './pictures/bg-index.jpg';\nimport grafo from './pictures/graph.png';\nimport Calculate from './calculateLogic';\nimport { \n  Divider,\n  FormControl,\n  Button,\n  TextField,\n  Paper,\n  FormLabel,\n  RadioGroup,\n  FormControlLabel,\n  Radio,\n} from '@material-ui/core';\nimport Graph from './graph'\nimport './App.css';\n\nlet Logicresult = ''\nexport function parseExpression(exp){\n  let item = exp.shift()\n  if (item !== undefined){\n    if (item === '('){\n      let oldResult = Logicresult\n      Logicresult = ''\n      parseExpression(exp)\n      let newOrder = Logicresult\n      Logicresult = oldResult\n      Logicresult = Logicresult.concat(newOrder)\n      parseExpression(exp)\n    }\n    if (item === '['){\n      Logicresult = Logicresult.concat(item)\n      let oldResult = Logicresult\n      Logicresult = ''\n      parseExpression(exp)\n      let newOrder = Logicresult\n      Logicresult = oldResult\n      Logicresult = Logicresult.concat(newOrder)\n      parseExpression(exp)\n    }\n    else {\n      if (item === ']'){\n        Logicresult = Logicresult.concat(item)\n      }\n      else{\n        if (item !== ')' && item !== '('){\n          if (['➡','^','V'].includes(item)){\n            Logicresult = item.concat(Logicresult)\n            parseExpression(exp)\n          }\n          else{\n            Logicresult = Logicresult.concat(item)\n            parseExpression(exp)\n          }\n        }\n      }\n    }\n  }\n  else{\n    return Logicresult\n  }\n}\n\nfunction createGraph(graph, vertices, rootNode){\n  for (let i = 0; i < vertices.length; i++){\n    graph.addVertex(vertices[i])\n  }\n\n  graph.addEdge('012', '021','X'); \n  graph.addEdge('012', '102','Z'); \n  graph.addEdge('012', '210','Y');\n  graph.addEdge('021', '201','Z');\n  graph.addEdge('021', '120','Y');\n  graph.addEdge('102', '120','X');\n  graph.addEdge('102', '201','Y');\n  graph.addEdge('120', '210','Z');\n  graph.addEdge('201', '210','X');\n  graph.setRootNode(rootNode)\n\n  return graph\n}\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state ={\n      logic: \"\",\n      result: \"\",\n      variables: [],\n      rootNode: '012',\n      vertices: ['012','021','102','120','201','210'],\n      graph: new Graph()\n    }\n  }\n\n  componentDidMount(){\n    let {graph, vertices, rootNode} = this.state\n    this.setState(createGraph(graph, vertices, rootNode))\n  }\n\n  handleChange = event => {\n    this.setState({\n      logic: event.target.value,\n      result: \"\"\n    });\n  };\n\n  getResult = () => {\n    let logic = this.state.logic.replace(/ /g,'').toUpperCase()\n    let {graph} = this.state\n    let operations = ['V','^','➡','!','<','>','[',']','K','B']\n    let agents = ['X','Y','Z']\n    let result = []\n    let variables = []\n\n    let arrayLogic = []\n    for (let i = 0; i < logic.length; i++)\n      arrayLogic.push(logic[i])\n\n    parseExpression(arrayLogic)\n    logic = Logicresult\n    Logicresult = ''\n\n    for (let i = 0; i < logic.length; i++){\n      if (!operations.includes(logic[i]) && !agents.includes(logic[i]) && !variables.includes(logic[i])){\n        variables.push(logic[i])\n      }\n      result.push(logic[i])\n    }\n\n    this.setState({\n      result: Calculate(result, graph),\n      variables\n    });\n  }\n\n  changeRootNode = event => {\n    let rootNode = event.target.value\n    let {graph} = this.state\n    graph.setRootNode(rootNode)\n    this.setState({\n      rootNode,\n      graph\n    })\n  }\n\n  changeLetters = (letter, vertice) => event => {\n    let {graph} = this.state\n    !graph.letterinList(vertice, letter) ? graph.addLetter(vertice, letter) :\n      graph.removeLetter(vertice, letter)\n    this.setState({\n      graph\n    })\n  }\n\n  clearGraph = (graph) => {\n    graph.clearGraph()\n  }\n\n  clear = () => {\n    let { graph } = this.state \n    let vertices = ['012','021','102','120','201','210']\n    let rootNode = '012'\n    this.clearGraph(graph)\n    this.setState({logic: \"\", result:\"\"})\n    this.setState(createGraph(graph, vertices, rootNode))\n  }\n\n  render() {\n    let {vertices, graph} = this.state\n    return (\n      <div className=\"App\" style={{backgroundColor: '#efeeee'}}>\n        <div className=\"crop\">\n          <img src={logo} alt=\"logProg\"/>\n        </div>\n        <Divider variant=\"middle\" />\n        <h2>Trabalho de Lógica em Programação</h2>\n        <Paper elevation={2} style={{paddingTop: 20, paddingBottom: 20}}>\n          <div style={{display: 'inline-grid'}}>\n            <div style={{display: 'flex'}}>\n              <div>\n                <FormLabel component=\"legend\" style={{textAlign: 'left', fontSize: 14, paddingLeft: 15}}>Grafo Inicial</FormLabel>\n                <img src={grafo} alt=\"grafo\" style={{width: 200}}/>\n              </div>\n              <div>\n                <FormLabel component=\"legend\" style={{textAlign: 'left', fontSize: 14, paddingLeft: 15}}>Grafo Resultante</FormLabel>\n                <p>Vértices: </p>\n                {graph.getAllState().map(function(state){\n                  return `${state} `\n                })}\n                <p>Arestas: </p>\n                {graph.getEdges().map(function(edge){\n                  return (<div>{edge}</div>)\n                })}\n              </div>\n            </div>\n          <FormLabel component=\"legend\" style={{textAlign: 'left', fontSize: 14, paddingLeft: 15}}>Agentes</FormLabel>\n          <p style={{textAlign: \"left\", fontWeight: \"bold\"}}>{'X, Y e Z'}</p>\n              <FormControl component=\"fieldset\">\n                <FormLabel component=\"legend\" style={{textAlign: 'left', fontSize: 14, paddingLeft: 15}}>Estado Correto</FormLabel>\n                <RadioGroup\n                  aria-label=\"rootNode\"\n                  name=\"rootNode\"\n                  style={{paddingLeft: 20}}\n                  value={this.state.rootNode}\n                  onChange={this.changeRootNode}\n                  row\n                >\n                  {vertices.map(item => (\n                    <FormControlLabel\n                      key={item}\n                      value={item}\n                      control={<Radio color=\"primary\"/>}\n                      label={item}\n                      labelPlacement=\"end\"\n                    />\n                  ))}\n                </RadioGroup>\n              </FormControl>\n            <p style={{textAlign: \"left\", fontWeight: \"bold\"}}>{'0, 1, e 2 são os símbolos proposicionais'}</p>\n            <p style={{textAlign: \"left\", fontWeight: \"bold\"}}>{'v, ^, ➡, !, K, B e [] são as operações possíveis'}</p>\n            <TextField\n              id=\"logic\"\n              label=\"Anúncio\"\n              onChange={this.handleChange}\n              value={this.state.logic}\n              margin=\"normal\"\n              variant=\"outlined\"\n              style={{marginRight: 50, marginLeft: 10}}\n            />\n            <div>\n              <Button variant=\"contained\" color=\"default\" style={{marginTop: 25, maxWidth: 380}} onClick={this.getResult}>\n                VERIFICAR RESULTADO\n              </Button>\n              <Button variant=\"contained\" color=\"default\" style={{marginTop: 25, maxWidth: 380}} onClick={this.clear}>\n                RECOMEÇAR\n              </Button>\n            </div>\n            <TextField\n              error\n              disabled\n              id=\"result\"\n              label=\"Resultado\"\n              style={{width: 320, marginLeft: 10}}\n              value={this.state.result}\n              margin=\"normal\"\n              variant=\"outlined\"\n            />\n          </div>\n        </Paper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.register();\n"],"sourceRoot":""}